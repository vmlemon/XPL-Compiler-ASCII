
     THE XPL COMPILER GENERATOR SYSTEM

          W. M. MCKEEMAN

               INFORMATION AND COMPUTER SCIENCES
               UNIVERSITY OF CALIFORNIA
               SANTA CRUZ, CALIFORNIA

          J. J. HORNING
          D. B. WORTMAN

               COMPUTER SCIENCE DEPARTMENT AND
               COMPUTATION CENTER (CAMPUS FACILITY)
               STANFORD UNIVERSITY
               STANFORD, CALIFORNIA



    THIS TAPE CONTAINS THE XPL COMPILER GENERATOR SYSTEM
DEVELOPED AT THE STANFORD COMPUTATION CENTER, CAMPUS FACILITY,    1966-1969
AND THE UNIVERSITY OF CALIFORNIA COMPUTATION CENTER, SANTA CRUZ,  1968-1969.

A BRIEF DESCRIPTION OF THE XPL SYSTEM IS GIVEN IN:


     W.M. MCKEEMAN, J.J. HORNING,  E.C. NELSON, AND D.B. WORTMAN
     "THE XPL COMPILER GENERATOR SYSTEM"
     PROCEEDINGS OF THE FALL JOINT COMPUTER CONFERENCE (DECEMBER 1968)

A TEXTBOOK ON COMPILER WRITING WHICH COMPLETELY DOCUMENTS THE
XPL SYSTEM WILL BE PUBLISHED BY PRENTICE HALL IN 1970,
WITH THE TITLE "A COMPILER GENERATOR".

THE PROGRAMS ON THIS TAPE ASSUME 2311 DISKS FOR  STORAGE AND
WILL WORK ON 2314 DISKS WITHOUT MODIFICATION.

THIS TAPE IS A STANDARD OS/360 9-TRACK, 800 BPI UNLABELED TAPE.


THE FILES ON THIS TAPE ARE:


 1   PROSE   A DESCRIPTION OF THE CONTENTS OF THIS TAPE (YOU ARE READING IT) AND
     SOME SAMPLE JOB CONTROL CARDS TO ILLUSTRATE THE USE OF THE COMPONENTS
     ON THE TAPE UNDER OS/360.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 2   XMON.SOURCE   THE OS ASSEMBLY LANGUAGE SOURCE CARDS FOR THE MACHINE
     LANGUAGE INTERFACE BETWEEN COMPONENTS OF THE SYSTEM AND OS/360.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 3   TRACE.SOURCE  THE OS ASSEMBLY LANGUAGE SOURCE CARDS FOR A TRACE ROUTINE
     WHICH IS USED TO FOLLOW THE EXECUTION OF PROGRAMS WRITTEN IN XPL AND
     RUN UNDER THE XMON MONITOR.  IT PRINTS ONE LINE FOR EVERY INSTRUCTION
     EXECUTED AND THUS PRODUCES A DETAILED BUT VOLUMINOUS RECORD OF WHAT
     THE XPL PROGRAM IS DOING.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 4   REFORM.SOURCE  THE OS ASSEMBLY LANGUAGE SOURCE CARDS FOR A SMALL UTILITY
     PROGRAM WHICH REFORMATS BINARY PROGRAMS FILES AS OUTPUT BY THE XCOM
     COMPILER.  ITS MAIN USE IS TO MOVE BINARY PROGRAMS FROM ONE DEVICE TO
     ANOTHER WITHOUT HAVING TO RECOMPILE.    (FOR EXAMPLE, MOVING FROM 2311
     DISKS TO 2314 DISKS OR TO THE 2321 DATA CELL).
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 5   XCOM.SOURCE  THE XPL SOURCE CARDS FOR THE XCOM COMPILER.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 6   XCOM.COMPILER  THE BINARY IMAGE OF THE XCOM COMPILER SUITABLE FOR LOADING
     BY THE XCOM.MONITOR.  THIS FILE IS THE RESULT OF USING XCOM TO COMPILE
     ITSELF FROM THE SOURCE CARDS IN FILE 5.
     (RECFM=F,LRECL=3600,BLKSIZE=3600)

 7   XCOM.SMALL.COMPILER   THE BINARY IMAGE OF A SPECIAL VERSION OF THE XCOM
     COMPILER FOR PEOPLE WITH SMALL MACHINE PROBLEMS.  THE RESULT OF USING
     THE ALTER PROGRAM TO CHANGE THE VALUE OF 'DISKBYTES' IN XCOM.SOURCE
     TO 400 AND COMPILING THE RESULTANT SOURCE WITH XCOM.  SEE THE SECTION
     BELOW ENTITLED "COMMENTS FOR PEOPLE WITH SMALL CORE PROBLEMS" FOR
     INSTRUCTIONS IN THE USE OF THIS SPECIAL VERSION.
     (RECFM=F,LRECL=3600,BLKSIZE=3600)

 8   ANALYZER.SOURCE  THE XPL SOURCE CARDS FOR THE SYNTAX ANALYSIS PROGRAM.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

 9   SYNTAX.ANALYZER  THE BINARY IMAGE OF THE SYNTAX ANALYSIS PROGRAM SUITABLE
     FOR LOADING BY XCOM.MONITOR. IT IS THE RESULT OF USING XCOM TO COMPILE
     FILE 9.
     (RECFM=F,LRECL=3600,BLKSIZE=3600)

10   SKELETON.SOURCE  THE XPL SOURCE CARDS FOR THE SKELETAL COMPILER.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

11   ALTER.SOURCE  THE XPL SOURCE CARDS FOR A SMALL CARD FILE EDITING UTILITY
     PROGRAM.  THIS PROGRAM IS USEFUL FOR MAINTAINING THE SOURCE FILES FOR
     THE COMPILERS.  CONTROL CARDS FOR USING THIS PROGRAM ARE DESCRIBED
     IN A COMMENT AT THE BEGINNING OF THIS SOURCE FILE.
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

12   ALTER.PROGRAM  THE BINARY IMAGE OF THE ALTER PROGRAM SUITABLE FOR LOADING
     BY XCOM.MONITOR.  IT IS THE RESULT OF USING XCOM TO COMPILE FILE 11.
     (RECFM=F,LRECL=3600,BLKSIZE=3600).

13   XPL.LIBRARY  A CARD FILE CONTAINING THE DYNAMIC STRING COMPACTIFICATION
     PROCEDURE WHICH MUST BE INCLUDED WITH ALL XPL PROGRAMS.  (SEE THE
     JCL EXAMPLES BELOW).
     (RECFM=FB,LRECL=80,BLKSIZE=2000)

14   XPL.BNF  CARDS CONTAINING THE BNF GRAMMAR FOR XPL EXPRESSED IN A FORM
     SUITABLE FOR INPUT TO THE SYNTAX ANALYSIS PROGRAM
     (RECFM=FB,LRECL=80,BLKSIZE=2000)



ABEND CODES RETURNED BY THE XPL SUBMONITOR


     THE SUBMONITOR WILL RETURN THE FOLLOWING USER COMPLETION CODES IN THE
EVENT OF ERRORS:

      100      ERROR IN OPENING ONE OF THE FILES:  PROGRAM, SYSPRINT OR SYSIN

      200      UNEXPECTED END OF FILE ENCOUNTERED WHILE READING IN THE
               XPL PROGRAM FILE.

      300      I/O ERROR (SYNAD ERROR) WHILE READING IN THE XPL PROGRAM FILE

      400      XPL PROGRAM TO BE LOADED WILL NOT FIT IN THE AMOUNT OF
               CORE AVAILABLE

      500      THE XPL PROGRAM HAS CALLED THE SUBMONITOR WITH AN INVALID
               REQUEST FOR SERVICE

      800+I    I/O ERROR (SYNAD) ON OUTPUTI  (MAY BE UNABLE TO OPEN THE FILE)

      900+I    REFERENCE TO OUTPUT(I) IN THE XPL PROGRAM SPECIFIES A
               NONEXISTENT OUTPUT FILE

     1000+I    I/O ERROR (SYNAD) IN INPUTI

     1200+I    END OF FILE ERROR ON INPUTI  (THE XPL PROGRAM TRIED TO READ AFTER
               THE SUBMONITOR HAD PASSED IT AN END OF FILE INDICATION FOR
               INPUTI)

     1400+I    THE XPL PROGRAM SPECIFIED A NONEXISTENT INPUT FILE:  INPUT(I)

     2000+I    I/O ERROR (SYNAD) ON DIRECT ACCESS FILEI
               (MAY BE UNABLE TO OPEN THE FILE)

     2200+I    END OF FILE ERROR ON DIRECT ACCESS FILEI

     4000      THE XPL PROGRAM REQUESTED TERMINATION AND A DUMP BY
               EXECUTING THE STATEMENT:        CALL  EXIT ;



PARAMETERS FOR THE SUBMONITOR  XPLSM


     IN ORDER TO GIVE SOME CONTROL OVER THE OPERATING ENVIRONMENT
SET UP BY THE XPLSM SUBMONITOR THE FOLLOWING PARAMETERS MAY BE USED
TO SPECIFY IMPORTANT SYSTEM PARAMETERS.  THESE PARAMETERS ARE PASSED
THROUGH THE PARM FIELD ON THE OS EXEC CARD AS IN:

 //SAMPLE      EXEC  PGM=XPLSM,PARM='PARM1,PARM2'

THE VALID PARAMETERS AND THEIR MEANINGS ARE GIVEN BELOW


     ALTER         INCREASES THE AMOUNT OF CORE GIVEN BACK TO OS/360
                   TO WORK WITH SO THAT THERE SHOULD BE SUFFICIENT CORE SPACE
                   TO ALLOW THE DYNAMIC OPENING OF INPUT AND OUTPUT FILES

     DUMP          SPECIFIES THAT AN ABEND DUMP IS TO BE TAKEN IN THE EVENT
                   OF SYNAD OR END OF FILE ERRORS

     FILE=NNNN     SPECIFIES THAT THE RECORD LENGTH (LRECL) AND BLOCKSIZE
                   (BLKSIZE) ON ALL DIRECT ACCESS FILES IS NNNN BYTES

     FREE=NNNN     SPECIFIES THAT THE SUBMONITOR SHOULD GIVE NNNN BYTES
                   OF CORE BACK TO OS

     MAX=NNNNN     SETS THE MAXIMUM AMOUNT OF CORE REQUESTED BY THE
                   SUBMONITOR FROM OS TO BE NNNNN BYTES

     MIN=NNNN      SETS THE MINIMUM AMOUNT OF CORE REQUESTED BY THE SUBMONITOR
                   FROM OS TO BE NNNN BYTES

     TRACE         BEGIN EXECUTION OF THE PROGRAM IN TRACE MODE RATHER THAN
                   ACTUAL EXECUTION.  EQUIVALENT TO PRECEEDING THE PROGRAM
                   WITH A   CALL  TRACE;






COMMENTS FOR PEOPLE WITH SMALL (128K) CORE PROBLEMS


   THE VERSION OF XCOM ON THE DISTRIBUTION TAPE TAKES ABOUT 95K BYTES FOR ITSELF
+ 8K FOR THE SUBMONITOR AND TRACE PACKAGE + AN UNKNOWN AMOUNT FOR I/O BUFFERS
AND ACCESS METHOD (BSAM & QSAM) SPACE AND DYNAMIC STRING STORAGE.

   SEVERAL IMMEDIATE WAYS OF REDUCING THE AMOUNT OF CORE REQUIRED BY THE
SYSTEM ARE:

1  REMOVE THE TRACE PACKAGE AND REPLACE IT WITH A NULL SUBROUTINE. (SAVE 4K)

2  USE UNBLOCKED SOURCE FILES IN ORDER TO REDUCE THE AMOUNT OF SPACE REQUIRED
   FOR I/O BUFFERS

3  REDUCE THE NUMBER OF BUFFERS SPECIFIED IN THE SUBMONITOR FOR SYSIN
   AND SYSPRINT

4  REDUCE THE SIZE OF THE CODE, DATA, AND STRING BUFFERS IN XCOM.  THIS
   REQUIRES CHANGING THE BLKSIZE (FILEBYTS) IN THE SUBMONITOR AND CHANGING
   THE VARIABLE DISKBYTES AND THE SIZE OF THE ARRAYS CODE, DATA, AND STRINGS
   IN XCOM.  ONE ALTERNATIVE IS TO MAKE THE BUFFERS VERY SMALL
   (SAY 400 BYTES).  THIS IN EFFECT TRADES CORE SPACE FOR DISK SPACE.
   A SPECIAL VERSION OF  XCOM  WITH THIS MODIFICATION IS INCLUDED ON THIS
   TAPE IN THE FILE  "XCOM.SMALL.COMPILER".
      THE WAY IN WHICH RANDOM ACCESS I/O IS IMPLEMENTED IN THIS SYSTEM
   DICTATES THAT ONLY ONE RECORD WILL BE WRITTEN PER DISK TRACK WHETHER
   THERE IS ROOM FOR MORE RECORDS OR NOT.  SETTING THE BUFFER SIZE TO 400
   BYTES WILL THUS CONSUME MANY DISK TRACKS FOR SCRATCH FILES.
   THE WAY TO KEEP FROM CLOGGING UP YOUR DISKS WITH THESE INEFFICIENT FILES
   IS TO FIRST COMPILE ONTO FILES WITH SMALL BLOCKSIZE AND THEN USE THE
   ASSEMBLY LANGUAGE ROUTINE REFORMAT DESCRIBED BELOW TO BLOCK THE FILES
   FOR MORE EFFICIENT DISK STORAGE.  SEE THE JCL EXAMPLE BELOW ENTITLED
   "EXAMPLE OF COMPILING WITH A LIMITED AMOUNT OF CORE AVAILABLE".






SAMPLE  JOB  CONTROL  STATEMENTS

     THE JOB CONTROL PRESENTED BELOW IS FOR ILLUSTRATIVE PURPOSES ONLY.  IT IS
     NOT SUPPOSED THAT IT WILL WORK AT EVERY INSTALLATION USING OS/360, BUT
     IS OFFERED AS A GUIDE FOR CONSTRUCTION OF APPROPRIATE LOCAL JCL.
     ALL PARAMETERS WHICH ARE TO BE SUPPLIED LOCALLY ARE DELIMITED BY < >
     AND ARE HOPEFULLY SELF EXPLANITORY.
     ANY CARD BELOW FLAGGED WITH AN * IN COLUMN ONE IS A COMMENT PROVIDED TO
     CLARIFY SOME POINT

     THE PROGRAMS AS RUN AT STANFORD MAKE SEVERAL ASSUMPTIONS ABOUT THE
     ENVIRONMENT IN WHICH THEY RUN.  THESE ASSUMPTIONS WILL BE LISTED HERE
     AS A WARNING TO THE USER THAT ALL MAY NOT BE AS SIMPLE AS IT SEEMS.

  1  ALL DATA-SETS NEEDED BY THE SYSTEM ARE CATALOGED IN THE SYSTEM CATALOG
     SO THAT ONLY THE DISP AND DSNAME PARAMETERS ARE NEEDED ON THE DD CARDS
     TO IDENTIFY THE DATASETS.  IF THEY ARE NOT CATALOGED, VOLUME=SER=
     AND UNIT= PARAMETERS MUST BE ADDED.

  2  THE EXISTENCE OF SYSTEM SCRATCH DATASETS IS EXPLICITLY ASSUMED.
     THESE DATASETS ARE NAMED SYS1.UT1, SYS1.UT2 AND SYS1.UT3.
     IF SUCH SCRATCH DATASETS ARE NOT ALWAYS AVAILABLE, THEY MUST BE
     DYNAMICALLY CREATED FOR EACH RUN USING THE PROPER JCL.

  3  THE EXISTENCE OF THE STANDARD IBM CATALOGED PROCEDURES FOR THE ASSEMBLER
     AND LINKAGE EDITOR IS EXPLICITLY ASSUMED.

  4  THE SUBMONITOR PROGRAMS CONTAIN NO ASSEMBLED IN INFORMATION
     ABOUT THE RECORD FORMAT, RECORD LENGTH, OR BLOCKSIZE OF THE
     'INPUT' AND 'OUTPUT' FILES.  IT MAY BE NECESSARY TO PROVIDE THIS
     INFORMATION ON DD CARDS WHEN CREATING NEW FILES OR USING
     PREDEFINED SCRATCH FILES.  WHEN USING OLD FILES THE INFORMATION
     SHOULD BE PICKED UP FROM THE VOLUME LABEL OR DATASET CONTROL BLOCK.

  5  THE SUBMONITORS DO CONTAIN DEVICE DEPENDENT BLOCKSIZE
     INFORMATION CONCERNING THE SCRATCH FILES.  IT MAY BE NECESSARY TO
     OVERRIDE THIS INFORMATION USING THE 'FILE=' PARAMETER IF OTHER THAN
     2311 DISKS ARE USED.  THE RECORD FORMAT ASSUMED FOR SCRATCH FILES
     MAY BE CHANGED ONLY THROUGH REASSEMBLY OF THE SUBMONITOR

  6  ONLY THE FILES PROGRAM, SYSPRINT, AND SYSIN ARE OPENED INITIALLY.  ALL
     OTHER FILES ARE OPENED THE FIRST TIME THEY ARE USED.

  7  IT IS ASSUMED THAT THE ASSEMBLIES OF XMON.SOURCE, TRACE.SOURCE, AND
     REFORMAT AS SHOWN BELOW HAVE BEEN MADE, SO THAT THESE
     LOAD MODULES MAY BE REFERENCED IN JOBLIB DD STATEMENTS.


*
*
*    JOB WHICH CREATED THE DISTRIBUTION TAPE
*
*
 //DISTRIB     JOB   <ACCOUNTING INFORMATION ETC.>
 //            EXEC  PGM=IEHMOVE
 //SYSRES      DD    UNIT=2301,DISP=OLD,VOLUME=SER=SYSRES
 //TODD1       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(1,NL),DSNAME=PROSE
 //TODD2       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(2,NL),DSNAME=XMON.SOURCE
 //TODD3       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(3,NL),DSNAME=TRACE.SOURCE
 //TODD4       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(4,NL),DSNAME=REFORM.SOURCE
 //TODD5       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(5,NL),DSNAME=XCOM.SOURCE
 //TODD6       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(6,NL),DSNAME=XCOM.COMPILER
 //TODD7       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(7,NL),DSNAME=XCOM.SMALL.COMPILER
 //TODD8       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(8,NL),DSNAME=ANALYZER.SOURCE
 //TODD9       DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(9,NL),DSNAME=SYNTAX.ANALYZER
 //TODD10      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(10,NL),DSNAME=SKELETON.SOURCE
 //TODD11      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(11,NL),DSNAME=ALTER.SOURCE
 //TODD12      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(12,NL),DSNAME=ALTER.PROGRAM
 //TODD13      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(13,NL),DSNAME=XPL.LIBRARY
 //TODD114     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(14,NL),DSNAME=XPL.BNF
 //DTAPE       DD    UNIT=2400,DISP=(OLD,PASS),VOLUME=SER=XPLDTP
 //SYSUT1      DD    UNIT=2314,DISP=OLD,VOLUME=REF=SYS1.UT1
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    *
        COPY    FROM=2400=(XPLDTP,1),TO=2400=(XPLSYS,1),TODD=TODD1,     X
                DSNAME=PROSE
        COPY    FROM=2400=(XPLDTP,2),TO=2400=(XPLSYS,2),TODD=TODD2,     X
                DSNAME=XMON.SOURCE
        COPY    FROM=2400=(XPLDTP,3),TO=2400=(XPLSYS,3),TODD=TODD3,     X
                DSNAME=TRACE.SOURCE
        COPY    FROM=2400=(XPLDTP,4),TO=2400=(XPLSYS,4),TODD=TODD4,     X
                DSNAME=REFORM.SOURCE
        COPY    FROM=2400=(XPLDTP,5),TO=2400=(XPLSYS,5),TODD=TODD5,     X
                DSNAME=XCOM.SOURCE
        COPY    FROM=2400=(XPLDTP,6),TO=2400=(XPLSYS,6),TODD=TODD6,     X
                DSNAME=XCOM.COMPILER
        COPY    FROM=2400=(XPLDTP,7),TO=2400=(XPLSYS,7),TODD=TODD7,     X
                DSNAME=XCOM.SMALL.COMPILER
        COPY    FROM=2400=(XPLDTP,8),TO=2400=(XPLSYS,8),TODD=TODD8,     X
                DSNAME=ANALYZER.SOURCE
        COPY    FROM=2400=(XPLDTP,9),TO=2400=(XPLSYS,9),TODD=TODD9,     X
                DSNAME=SYNTAX.ANALYZER
        COPY    FROM=2400=(XPLDTP,10),TO=2400=(XPLSYS,10),TODD=TODD10,  X
                DSNAME=SKELETON.SOURCE
        COPY    FROM=2400=(XPLDTP,11),TO=2400=(XPLSYS,11),TODD=TODD11,  X
                DSNAME=ALTER.SOURCE
        COPY    FROM=2400=(XPLDTP,12),TO=2400=(XPLSYS,12),TODD=TODD12,  X
                DSNAME=ALTER.PROGRAM
        COPY    FROM=2400=(XPLDTP,13),TO=2400=(XPLSYS,13),TODD=TODD13,  X
                DSNAME=XPL.LIBRARY
        COPY    FROM=2400=(XPLDTP,14),TO=2400=(XPLSYS,14),TODD=TODD14,  X
                DSNAME=XPL.BNF
 /*
 //LISTPROS    EXEC  PGM=IEBPTPCH
 //SYSPRINT    DD    DUMMY
 //SYSUT1      DD    UNIT=2400,DISP=OLD,VOLUME=SER=XPLSYS,              X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000),                   X
 //             LABEL=(1,NL),DSNAME=PROSE
 //SYSUT2      DD    SYSOUT=A
 //SYSIN       DD    *
        PRINT   MAXFLDS=1
        RECORD  FIELD=(80,1,,20)
 /*
*
*
*              JOB TO COPY THE DISTRIBUTION TAPE TO A 2311 DISK PACK
*
*
 //UNDIST      JOB   <ACCOUNTING INFORMATION ETC.>
 //            EXEC  PGM=IEHMOVE
 //SYSRES      DD    <DEFINE SYSTEM RESIDENCE VOLUME>
 //SYSUT1      DD    <DEFINE SCRATCH FILE>
 //SYSPRINT    DD    SYSOUT=A
 //FROMDD1     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(1,NL),DSNAME=PROSE
 //FROMDD2     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(2,NL),DSNAME=XMON.SOURCE
 //FROMDD3     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(3,NL),DSNAME=TRACE.SOURCE
 //FROMDD4     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(4,NL),DSNAME=REFORM.SOURCE
 //FROMDD5     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(5,NL),DSNAME=XCOM.SOURCE
 //FROMDD6     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(6,NL),DSNAME=XCOM.COMPILER
 //FROMDD7     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(7,NL),DSNAME=XCOM.SMALL.COMPILER
 //FROMDD8     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(8,NL),DSNAME=ANALYZER.SOURCE
 //FROMDD9     DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(9,NL),DSNAME=SYNTAX.ANALYZER
 //FROMDD10    DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(10,NL),DSNAME=SKELETON.SOURCE
 //FROMDD11    DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(11,NL),DSNAME=ALTER.SOURCE
 //FROMDD12    DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,                                      X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(12,NL),DSNAME=ALTER.PROGRAM
 //FROMDD13    DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(13,NL),DSNAME=XPL.LIBRARY
 //FROMDD114   DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             VOLUME=SER=XPLSYS,DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000), X
 //             LABEL=(14,NL),DSNAME=XPL.BNF
 //URPACK      DD    UNIT=2311,DISP=OLD,VOLUME=SER=<SERIAL>
 //SYSIN       DD    *
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,1),FROMDD=FROMDD1,   X
                DSNAME=PROSE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,2),FROMDD=FROMDD2,   X
                DSNAME=XMON.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,3),FROMDD=FROMDD3,   X
                DSNAME=TRACE.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,4),FROMDD=FROMDD4,   X
                DSNAME=REFORM.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,5),FROMDD=FROMDD5,   X
                DSNAME=XCOM.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,6),FROMDD=FROMDD6,   X
                DSNAME=XCOM.COMPILER
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,7),FROMDD=FROMDD7,   X
                DSNAME=XCOM.SMALL.COMPILER
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,8),FROMDD=FROMDD8,   X
                DSNAME=ANALYZER.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,9),FROMDD=FROMDD9,   X
                DSNAME=SYNTAX.ANALYZER
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,10),FROMDD=FROMDD10, X
                DSNAME=SKELETON.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,11),FROMDD=FROMDD11, X
                DSNAME=ALTER.SOURCE
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,12),FROMDD=FROMDD12, X
                DSNAME=ALTER.PROGRAM
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,13),FROMDD=FROMDD13, X
                DSNAME=XPL.LIBRARY
        COPY    TO=2311=<SERIAL>,FROM=2400=(XPLSYS,14),FROMDD=FROMDD14, X
                DSNAME=XPL.BNF
 /*
*
*
*
*              EXAMPLE OF USING IEBPTPCH TO PRINT A FILE FROM
*              THE DISTRIBUTION TAPE.
*
*
 //LIST        JOB   <ACCOUNTING INFORMATION>
 //LISTXCOM    EXEC  PGM=IEBPTPCH
 //SYSPRINT    DD    DUMMY
 //SYSUT1      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000),                   X
 //             VOLUME=SER=XPLSYS,LABEL=(5,NL),DSNAME=XCOM.SOURCE
 //SYSUT2      DD    SYSOUT=A
 //SYSIN       DD    *
        PRINT   MAXFLDS=1
        RECORD  FIELD=(80,1,,20)
 /*
*
*
*              JOB TO USE IEBPTPCH TO PUNCH A SOURCE FILE FROM THE
*              DISTRIBUTION TAPE.
*
*
 //PUNCH       JOB   <ACCOUNTING INFORMATION>
 //PUNCHXSM    EXEC  PGM=IEBPTPCH
 //SYSPRINT    DD    DUMMY
 //SYSUT1      DD    UNIT=(2400,,DEFER),DISP=(OLD,PASS),                X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000),                   X
 //             VOLUME=SER=XPLSYS,LABEL=(2,NL),DSNAME=XMON.SOURCE
 //SYSUT2      DD    UNIT=SYSCP
 //SYSIN       DD    *
        PUNCH   MAXFLDS=1
        RECORD  FIELD=(80,1,,)
 /*
*
*              JOB TO ASSEMBLE AND LINK EDIT XCOM.MONITOR
*
*                  NOTE THAT THESE ASSEMBLIES COULD ALSO BE MADE DIRECTLY
*                  FROM THE DISTRIBUTION TAPE BY A PROPER DEFINITION
*                  OF THE ASSEMBLER SYSIN.
*
*
*
 //AXMON       JOB   <ACCOUNTING INFO>
 //            EXEC  ASMFC
 //ASM.SYSIN   DD    DISP=OLD,DSNAME=XMON.SOURCE
 //            EXEC  ASMFCL
 //ASM.SYSIN   DD    DISP=OLD,DSNAME=TRACE.SOURCE
 //LKED.SYSLMOD DD   UNIT=2311,DISP=(NEW,CATLG),VOLUME=SER=<SERIAL>,    X
 //             SPACE=(TRK,(8,2,1),RLSE),DSNAME=XCOM.MONITOR
 //LKED.SYSIN  DD    *
        ENTRY   XPLSM
        NAME    XPLSM(R)
 /*
*
*
*              JOB TO ASSEMBLE AND LINK EDIT REFORMAT
*
*
 //ARFM        JOB   <ACCOUNTING INFO>
 //            EXEC  ASMFCL
 //ASM.SYSIN   DD    DISP=OLD,DSNAME=REFORM.SOURCE
 //LKED.SYSLMOD DD   UNIT=2311,DISP=(NEW,CATLG),VOLUME=SER=<SERIAL>,    X
 //             SPACE=(TRK,(4,1,1),RLSE),DSNAME=REFORMAT
 //LKED.SYSIN DD *
        NAME    REFORM(R)
 /*
*
*
*              JOB TO COMPILE XCOM USING ITSELF
*
*
 //CXC         JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.COMPILER
*
*              THE XCOM COMPILER WRITES OUT THE COMPILED PROGRAM ON THE
*              DATASET DEFINED BY FILE1
*
 //FILE1       DD    UNIT=2311,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             SPACE=(TRK,(40,0),RLSE),DSNAME=XCOM.NEW
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
*
*              THE SOURCE TEXT ON INPUT2 (THE XPL LIBRARY) IS COMPILED
*              BEFORE THE MAIN PROGRAM SOURCE ON SYSIN.
*
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSPRINT    DD    SYSOUT=A
 //SYSUDUMP    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=XCOM.SOURCE
*
*
*              EXAMPLE OF COMPILING WITH A LIMITED AMOUNT OF CORE STORAGE.
*
*
 //SMALL       JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=(OLD,PASS),DSNAME=XCOM.MONITOR
 //            DD    DISP=(OLD,PASS),DSNAME=REFORMAT
 //COMPILE     EXEC  PGM=XPLSM,PARM='FILE=400'
*
*              THE 'FREE=','MAX=' PARAMETERS MAY ALSO BE NEEDED.
*
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.SMALL.COMPILER
*
*              NOTE THAT A SPECIAL VERSION OF XCOM MUST BE USED
*
 //FILE1       DD    DISP=(NEW,PASS),VOLUME=SER=<SERIAL>,UNIT=2311,     X
 //             SPACE=(TRK,(150,0),RLSE),DSNAME=TEMP
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
*
*              NOTE THAT THE SCRATCH FILES MUST BE LARGE TOO.
*
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=XCOM.SOURCE
 //REFORMAT    EXEC  PGM=REFORM
 //SYSUT1      DD    DISP=(OLD,DELETE),DSNAME=*.COMPILE.FILE1
 //SYSUT2      DD    DISP=OLD,DSNAME=XCOM.COMPILER,                     X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600)
 //SYSPRINT    DD    SYSOUT=A
*
*
*              JOB TO COMPILE THE SYNTAX ANALYSIS PROGRAM
*
*
 //CANAL       JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1       DD    UNIT=2311,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             SPACE=(TRK,(30,0),RLSE),DSNAME=ANALYZER.NEW
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=ANALYZER.SOURCE
*
*
*              JOB TO COMPILE THE ALTER PROGRAM
*
*
 //CALT        JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1       DD    UNIT=2311,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             SPACE=(TRK,(10,0),RLSE),DSNAME=ALTER.NEW
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=ALTER.SOURCE
*
*
*              JOB WHICH USES REFORMAT TO MOVE THE XCOM COMPILER FROM
*              A 2311 TO A 2314 DISK
*
*
 //MVXCM       JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=REFORMAT
 //            EXEC  PGM=REFORM
*
*              SYSUT1 IS THE INPUT FILE
*              OUTPUT APPEARS ON SYSUT2
*
 //SYSUT1      DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //SYSUT2      DD    UNIT=2314,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=F,LRECL=7294,BLKSIZE=7294),                  X
 //             SPACE=(TRK,(30,0),RLSE),DSNAME=XCOM.COMPILER
 //SYSPRINT    DD    SYSOUT=A
*
*
*              JOB WHICH USES REFORMAT TO MOVE THE ALTER PROGRAM TO A
*              2321 DATA CELL
*
*
 //MVALT       JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=REFORMAT
 //            EXEC  PGM=REFORM
 //SYSUT1      DD    DISP=OLD,DSNAME=ALTER.PROGRAM
 //SYSUT2      DD    UNIT=2321,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=F,LRECL=2000,BLKSIZE=2000),                  X
 //             SPACE=(TRK,(4,0),RLSE),DSNAME=ALTER.PROGRAM
 //SYSPRINT    DD    SYSOUT=A
*
*
*              JOB WHICH USES REFORMAT TO BLOCK THE XCOM BINARY
*              FILE ON A 2314 USING TRACK OVERFLOW
*
*
 //RFM3        JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=REFORMAT
 //            EXEC  PGM=REFORM
 //SYSUT1      DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //SYSUT2      DD    UNIT=2314,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=FT,LRECL=32760,BLKSIZE=32760),               X
 //             SPACE=(TRK,(40,0),RLSE),DSNAME=XCOM.COMPILER
 //SYSPRINT    DD    SYSOUT=A
*
*
*              JOB WHICH USES REFORMAT TO REBLOCK A FILE FROM THE
*              DISTRIBUTION TAPE TO A 2321 DATA CELL
*
*
 //REFMTAPE    JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=REFORMAT
 //            EXEC  PGM=REFORM
 //SYSUT1 DD    UNIT=2400,DISP=(OLD,PASS),VOLUME=(PRIVATE,SER=XPLSYS),  X
 //             DCB=(RECFM=F,LRECL=3600,BLKSIZE=3600),                  X
 //             LABEL=(7,NL),DSNAME=XCOM.SMALL.COMPILER
 //SYSUT2      DD    UNIT=2321,DISP=(NEW,CATLG),VOLUME=SER=<SERIAL>,    X
 //             DCB=(RECFM=F,LRECL=2000,BLKSIZE=2000),                  X
 //             SPACE=(TRK,(60,0),RLSE),DSNAME=XCOM.SMALL.COMPILER
 //SYSPRINT    DD    SYSOUT=A
*
*
*              JOB WHICH ALTERS XCOM.SOURCE AND CREATES A NEW SOURCE FILE
*
*
 //ALTX        JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM,PARM='ALTER'
 //PROGRAM     DD    DISP=OLD,DSNAME=ALTER.PROGRAM
*
*               ALTER INPUT IS FROM INPUT3 AND SYSIN.  OUTPUT
*               IS ON OUTPUT3
*
 //INPUT3      DD    DISP=OLD,DSNAME=XCOM.SOURCE
 //OUTPUT3     DD    UNIT=2311,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3600),                   X
 //             SPACE=(TRK,(80,20),RLSE),DSNAME=XCOM.SOURCE2
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    *
  < ALTER CONTROL CARDS (SEE ALTER SOURCE LISTING FOR A DESCRIPTION) >
 /*
*
*
*              JOB WHICH USES ALTER TO CREATE A NEW FILE
*
*
 //CRAL        JOB   <ACCOUNTING INFO>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM,PARM='FREE=16000'
 //PROGRAM     DD    DISP=OLD,DSNAME=ALTER.PROGRAM
 //INPUT3      DD    DUMMY
 //OUTPUT3     DD    UNIT=2314,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=7280),                   X
 //             SPACE=(TRK,(40,20),RLSE),DSNAME=NEW.SOURCE
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    *
 //SYSIN       DD    *
  < DECK OF CARDS TO BE PUT ON DISK >
 $$ EOF
 /*
*
*
*              JOB WHICH USES ALTER TO REBLOCK A SOURCE FILE FROM ONE
*              DEVICE TO ANOTHER
*
*
 //REBL        JOB   <ACCOUNTING INFO>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM,PARM='FREE=20000'
 //PROGRAM     DD    DISP=OLD,DSNAME=ALTER.PROGRAM
 //INPUT3      DD    UNIT=2311,DISP=(OLD,PASS),VOLUME=SER=<SERIAL>,     X
 //             DSNAME=SOURCE1
*
*              INPUT COULD BE FROM A SOURCE FILE ON THE
*              DISTRIBUTION TAPE.
*
 //OUTPUT3     DD    UNIT=2321,DISP=(NEW,KEEP),VOLUME=SER=<SERIAL>,     X
 //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=2000),                   X
 //             SPACE=(TRK,(100,20),RLSE),DSNAME=SOURCE2
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DUMMY
*
*
*              JOB WHICH ALTERS AND THEN COMPILES XCOM
*
*
 //AXCOM       JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=(OLD,PASS),DSNAME=XCOM.MONITOR
 //ALT         EXEC  PGM=XPLSM,PARM='ALTER'
 //PROGRAM     DD    DISP=OLD,DSNAME=ALTER.PROGRAM
 //INPUT3      DD    DISP=OLD,DSNAME=XCOM.SOURCE1
 //OUTPUT3     DD    DISP=(OLD,PASS),DSNAME=XCOM.SOURCE2
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    *
 < ALTER CONTROL CARDS >
 /*
 //            EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1       DD    DISP=OLD,DSNAME=XCOM.CMPLR2
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSPRINT    DD    SYSOUT=A
 //SYSUDUMP    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=*.ALT.OUTPUT3
*
*
*              JOB WHICH ALTERS, COMPILES AND EXECUTES XCOM
*
*
 //ACXCOM      JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //ALTER       EXEC  PGM=XPLSM,PARM='ALTER'
 //PROGRAM     DD    DISP=OLD,DSNAME=ALTER.PROGRAM
 //INPUT3      DD    DISP=OLD,DSNAME=XCOM.SOURCE1
 //OUTPUT3      DD   DISP=(OLD,PASS),DSNAME=XCOM.SOURCE2
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    *
 < ALTER CONTROL CARDS >
 /*
 //COMPILE      EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1       DD    DISP=(OLD,PASS),DSNAME=XCOM.CMPLR2
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT2
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=*.ALTER.OUTPUT3
 //GO          EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=*.COMPILE.FILE1
 //FILE1       DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE2       DD    DISP=OLD,DSNAME=SYS1.UT2
 //FILE3       DD    DISP=OLD,DSNAME=SYS1.UT3
 //INPUT2      DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    *

      /* XPL PROGRAM TO BE COMPILED  */
     ;

 /*
*
*
*
*              JOB WHICH USES THE SYNTAX ANALYZER TO PRODUCE NEW TABLES
*              FOR XCOM.
*
*
 //TABLES      JOB   <ACCOUNTING INFORMATION>
 //JOBLIB      DD    DISP=OLD,DSNAME=XCOM.MONITOR
 //            EXEC  PGM=XPLSM
 //PROGRAM     DD    DISP=OLD,DSNAME=SYNTAX.ANALYZER
 //SYSPUNCH    DD    UNIT=SYSCP,DCB=(RECFM=F,LRECL=80,BLKSIZE=80)
*
*              PUNCHED CARD OUTPUT(2) = SYSPUNCH
*
 //SYSUDUMP    DD    SYSOUT=A
 //SYSPRINT    DD    SYSOUT=A
 //SYSIN       DD    DISP=OLD,DSNAME=XPL.BNF
*
*
*              EXAMPLES OF USEFUL CATALOGUED PROCEDURES FOR THE XPL SYSTEM
*              (USE OF AN APPROPRIATE JOBLIB CARDS IS ASSUMED).
*
*
*    XPLC      COMPILE AN XPL PROGRAM
*
*
 //XPL    EXEC  PGM=XPLSM
 //PROGRAM DD   DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1  DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE2  DD    DISP=OLD,DSNAME=SYS1.UT2
 //FILE3  DD    DISP=OLD,DSNAME=SYS1.UT3
 //INPUT2 DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSPRINT DD  SYSOUT=A
 //SYSUDUMP DD  SYSOUT=A
*
*    XPLCG     COMPILE AND EXECUTE AN XPL PROGRAM
*
 //XPL    EXEC  PGM=XPLSM
 //PROGRAM DD   DISP=OLD,DSNAME=XCOM.COMPILER
 //FILE1  DD    DISP=(OLD,PASS),DSNAME=SYS1.UT1
 //FILE2  DD    DISP=OLD,DSNAME=SYS1.UT2
 //FILE3  DD    DISP=OLD,DSNAME=SYS1.UT3
 //INPUT2 DD    DISP=OLD,DSNAME=XPL.LIBRARY
 //SYSPRINT DD  SYSOUT=A
 //SYSUDUMP DD  SYSOUT=A
 //GO     EXEC  PGM=XPLSM
 //PROGRAM DD   DISP=OLD,DSNAME=*.XPL.FILE1
 //FILE1  DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE2  DD    DISP=OLD,DSNAME=SYS1.UT2
 //FILE3  DD    DISP=OLD,DSNAME=SYS1.UT3
 //SYSPRINT DD  SYSOUT=A
 //SYSPUNCH DD  UNIT=SYSCP
 //SYSUDUMP DD  SYSOUT=A
*
*    XPLG      EXECUTE A PREVIOUSLY COMPILED XPL PROGRAM
*
 //GO     EXEC  PGM=XPLSM
 //FILE1  DD    DISP=OLD,DSNAME=SYS1.UT1
 //FILE2  DD    DISP=OLD,DSNAME=SYS1.UT2
 //FILE3  DD    DISP=OLD,DSNAME=SYS1.UT3
 //SYSPRINT DD  SYSOUT=A
 //SYSPUNCH DD  UNIT=SYSCP
 //SYSUDUMP DD  SYSOUT=A
*
*    ANALYZE   EXECUTE THE SYNTAX ANALYSIS PROGRAM
*
 //ANALYZE EXEC PGM=XPLSM
 //PROGRAM DD   DISP=OLD,DSNAME=SYNTAX.ANALYZER
 //SYSPUNCH DD  UNIT=SYSCP
 //SYSPRINT DD  SYSOUT=A
 //SYSUDUMP DD  SYSOUT=A
